1、最开始实例化Vue的时候，做各种初始化和mixin；
2、开始render，创建app.vue的vnode，在这过程中要继承大Vue的方法和属性；
3、开始patch，找到id为app的父节点（body），执行createComponent，发现上面创建的组件vnode的data属性中有hook及其init方法，就执行hook.init，这个时候正式实例化了组件app，接下来就执行$mount进行挂载，因为app.vue在编译的时候就自动生成了render方法，所以执行mount.call方法，调用mountComponent，new Watch的时候，执行updateComponent，继续执行render和update，update的时候再patch。




【中没有组件的时候】，执行app.vue的patch，然后createComponent的时候没有data，也就没有hook.init，明天需要注意下是不是这个原因？

有两个createComponent的方法，第一个是创建Vue构造函数的，主要是继承大Vue的功能，还有一个是上面第三点中提到的，用于实例化组件vnode或判断是否是一个组件（createElm的时候用到）

实例化Vue的过程：
1、处理全局混入的mixin、filters等，并mergeOptions；
if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      debugger;
      initInternalComponent(vm, options);
    } else {
      debugger;
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }


2、vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');
    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }

3、vm.$mount的时候依次执行render和_update(patch)，在patch的过程中，如果有子组件，会继续在render的过程中创建一个组件vnode（vue的子构造器），然后在patch的过程中实例化，path完成之后获取到$el。依次循环。
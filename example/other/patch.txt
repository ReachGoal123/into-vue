vm.$mount

Vue.prototype.$mount = function (el) {
	el = el && inBrowser ? query(el) : undefined;
	return mountComponent(this, el, hydrating)
}

function mountComponent () {
	var updateComponent = function () {
		vm._update(vm._render(), hydrating);
	}

	new Watcher(vm, updateComponent, noop, null, true);
	hydrating = false;

	// ... callHook(vm, 'mounted');

	return vm;	
}


Vue.prototype._render = function () {
	var vm = this;
	var ref = vm.$options;
	var render = ref.render;
	var _parentVNode = ref._parentVnode; // 初次为 undefined，$options._parentVnode，占位符vnode

	vm.$vnode = _parentVNode; // render 的时候初始化占位符 vnode

	try {
		vnode = render.call(vm._renderProxy, vm.$createElement);
	} catch (e) {
		// ...
	}

	vnode.parent = _parentVnode; // undefined
	return vnode;
}

vm.$createElement = function (/* 一系列参数 */) {
	return createElement(vm, a, b, c, d, true);
}

vm._c = function (/* 一系列参数 */) {
	return createElement(vm, a, b, c, d, false);
}

function createElement () {
	// 降级处理参数...
	return _createElement(/* 一系列参数 */)
}

function _createElement () {
	// ... 对 data 等参数做了校验
	// 如果是 render 一个组件，那么 tag 是一个对象
	vnode = createComponent(tag, data, context, children);
	// 如果 render 是一个普通的 html 标签，那么tag 是一个 string
	// vnode = new VNode(/* 一系列参数 */);
}

function createComponent (Ctor: Object, data: undefined, context: Object, children: undefined, tag: undefined) {
	// Cotr 通过 Vue.extend 变成 Vue 子类
	var baseCtor = context.$options._base;

  	// plain options object: turn it into a constructor
  	if (isObject(Ctor)) {
    		Ctor = baseCtor.extend(Ctor);
  	}
	
	data = data || {};
	data.on = data.nativeOn; // undefined
	
	// 组件构造函数创建之后，[全局 mixins] 应用的情况下，解析构造函数的 options 选项
	resolveConstructorOptions(Ctor);
	
	// 将组件管理的钩子安装到占位符 node 上
  	installComponentHooks(data);
	// data = { on: undefined, hook: { init: fn, prepatch: fn, insert: fn, destroy: fn } };

	var vnode = new VNode(
   		 ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    		data, undefined, undefined, undefined, context,
    		{ Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    		asyncFactory
  	);
	
	// *** 这里返回的是占位符 vnode ***
	return vnode;
}

----------------------------------------------------

Vue.prototype._update = function (vnode, hydrating: undefined) {
	var prevEl = vm.$el;
    	var prevVnode = vm._vnode;
    	var prevActiveInstance = activeInstance;
    	activeInstance = vm;
	// update 的时候初始化 _vnode（渲染vnode）
	// 也就是上面刚刚通过 render 函数返回的 vnode
    	vm._vnode = vnode;

	if (!prevVnode) {
      		// initial render
      		vm.$el = vm.__patch__(
        	vm.$el, vnode, hydrating, false /* removeOnly */,
        	vm.$options._parentElm,
        	vm.$options._refElm
      	);
      	// no need for the ref nodes after initial patch
      	// this prevents keeping a detached DOM tree in memory (#5851)
      	vm.$options._parentElm = vm.$options._refElm = null;
    	} else {
      		// updates
      		vm.$el = vm.__patch__(prevVnode, vnode);
    	}
}

Vue.prototype.__patch__ = function (/* 一系列参数 */) {
	// ...
	// 高阶函数返回一个 patch 方法
	return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
		// 将普通的标签节点变成 vnode
 		oldVnode = emptyNodeAt(oldVnode);
		var oldElm = oldVnode.elm;
		// 父节点，首次初始化是 body
        	var parentElm$1 = nodeOps.parentNode(oldElm);

		createElm();
	}
}

function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
	if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
		return;
	}

	vnode.elm = vnode.ns
        	? nodeOps.createElementNS(vnode.ns, tag)
        	: nodeOps.createElement(tag, vnode);
      	setScope(vnode);

	{
        	createChildren(vnode, children, insertedVnodeQueue);
        	if (isDef(data)) {
          		invokeCreateHooks(vnode, insertedVnodeQueue);
        	}
       		insert(parentElm, vnode.elm, refElm);
      	}
}

function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
	// ... 执行 component hook 中的 init 方法
	if (
      		vnode.componentInstance &&
      		!vnode.componentInstance._isDestroyed &&
      		vnode.data.keepAlive
    	) {
      		// kept-alive components, treat as a patch
		// 数据更新驱动视图的变化，执行：
      		var mountedNode = vnode; // work around flow
      		componentVNodeHooks.prepatch(mountedNode, mountedNode);
    	} else {
		// 首次 patch，执行：
      		var child = vnode.componentInstance = createComponentInstanceForVnode(
        		vnode,
        		activeInstance,
        		parentElm,
        		refElm
      		);
		
		// 子组件再次 $mount，然后 mountComponent，接着 render 和 update
      		child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    	}
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent, // 重要： activeInstance in lifecycle state
  parentElm,
  refElm
) {
  var options = {
    _isComponent: true,
    parent: parent,
    _parentVnode: vnode,
    _parentElm: parentElm || null,
    _refElm: refElm || null
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  // 再次执行 Vue 实例化过程
  return new vnode.componentOptions.Ctor(options)
}

Vue.prototype.$mount = function () {
	var mount = Vue.prototype.$mount;
	 return mount.call(this, el, hydrating)
}